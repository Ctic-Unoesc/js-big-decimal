{"version":3,"sources":["add.js","big-decimal.js","round.js"],"names":["add","compliment","number","s","l","length","dec","split","ld","i","parseInt","addCore","Array","join","trim","parts","substring","number1","number2","parts1","parts2","length1","length2","Math","abs","sum","carry","temp","neg","ind","li","max","ld1","ld2","res","bigDecimal","validate","toString","isNaN","indexOf","Error","value","prototype","getValue","getPrettyValue","digits","separator","len","round","precision","roundOff","greaterThanFive","part","pre","increment","c","x","reverse","input","n","partInt","partDec"],"mappings":"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","file":"bigDecimal.min.js","sourcesContent":["var add = (function () {\r\n    function add(number1, number2) {\r\n\r\n        var neg = 0, ind = -1;\r\n\r\n        //check for negatives\r\n        if (number1[0] == '-') {\r\n            neg++;\r\n            ind = 1;\r\n            number1 = number1.substring(1);\r\n        }\r\n        if (number2[0] == '-') {\r\n            neg++;\r\n            ind = 2;\r\n            number2 = number2.substring(1);\r\n        }\r\n\r\n        var parts1 = number1.split('.'),\r\n            parts2 = number2.split('.');\r\n\r\n        var li = Math.max(parts1[0].length, parts2[0].length),\r\n            ld1 = parts1[1] ? parts1[1].length : 0,\r\n            ld2 = parts2[1] ? parts2[1].length : 0,\r\n            ld = Math.max(ld1, ld2);\r\n\r\n        if (neg == 1) {\r\n            if (ind == 1)\r\n                number1 = compliment(number1);\r\n            else\r\n                number2 = compliment(number2);\r\n        }\r\n\r\n        var res = addCore(number1, number2);\r\n\r\n        if (!neg)\r\n            return trim(res);\r\n        else if (neg == 2)\r\n            return ('-' + trim(res));\r\n        else {\r\n            if (res.length == li + ld + 1 + (ld ? 1 : 0))\r\n                return trim(res.substring(1));\r\n            else\r\n                return ('-' + trim(compliment(res)));\r\n        }\r\n    }\r\n\r\n    function compliment(number) {\r\n        var s = '',\r\n            l = number.length,\r\n            dec = number.split('.')[1],\r\n            ld = dec ? dec.length : 0;\r\n\r\n        for (var i = 0; i < l; i++) {\r\n            if (number[i] >= '0' && number[i] <= '9')\r\n                s += (9 - parseInt(number[i]));\r\n            else\r\n                s += number[i];\r\n        }\r\n\r\n        var one = (ld > 0) ? ('0.' + (new Array(ld)).join('0') + '1') : '1';\r\n\r\n        return addCore(s, one);\r\n    }\r\n\r\n    function trim(number) {\r\n        var parts = number.split('.');\r\n\r\n        if (!parts[0])\r\n            parts[0] = '0';\r\n\r\n        while (parts[0][0] == '0' && parts[0].length > 1)\r\n            parts[0] = parts[0].substring(1);\r\n\r\n        return parts[0] + (parts[1] ? ('.' + parts[1]) : '');\r\n    }\r\n\r\n    function addCore(number1, number2) {\r\n        var parts1 = number1.split('.'),\r\n            parts2 = number2.split('.');\r\n\r\n        //pad integral part\r\n        var length1 = parts1[0].length,\r\n            length2 = parts2[0].length;\r\n\r\n        if (length1 > length2) {\r\n            parts2[0] = (new Array(Math.abs(length1 - length2) + 1)).join('0') + (parts2[0] ? parts2[0] : '');\r\n        } else {\r\n            parts1[0] = (new Array(Math.abs(length1 - length2) + 1)).join('0') + (parts1[0] ? parts1[0] : '');\r\n        }\r\n\r\n        //pad fractional part\r\n        var length1 = parts1[1] ? parts1[1].length : 0,\r\n            length2 = parts2[1] ? parts2[1].length : 0;\r\n        if (length1 || length2) {\r\n            if (length1 > length2) {\r\n                parts2[1] = (parts2[1] ? parts2[1] : '') + (new Array(Math.abs(length1 - length2) + 1)).join('0');\r\n            } else {\r\n                parts1[1] = (parts1[1] ? parts1[1] : '') + (new Array(Math.abs(length1 - length2) + 1)).join('0');\r\n            }\r\n        }\r\n\r\n        number1 = parts1[0] + ((parts1[1]) ? ('.' + parts1[1]) : '');\r\n        number2 = parts2[0] + ((parts2[1]) ? ('.' + parts2[1]) : '');\r\n\r\n        var sum = ''\r\n        carry = 0;\r\n\r\n        for (var i = number1.length - 1; i >= 0; i--) {\r\n            if (number1[i] === '.') {\r\n                sum = '.' + sum;\r\n                continue;\r\n            }\r\n            var temp = parseInt(number1[i]) + parseInt(number2[i]) + carry;\r\n            sum = (temp % 10) + sum;\r\n            carry = parseInt(temp / 10);\r\n        }\r\n\r\n        return carry ? ('1' + sum) : sum;\r\n    }\r\n\r\n    return add;\r\n\r\n})();\r\n","var bigDecimal = (function () {\r\n    bigDecimal = function (number) {\r\n\r\n        validate = function (number) {\r\n            if (number) {\r\n                number = number.toString();\r\n                if (isNaN(number) || number.indexOf('e') > -1)\r\n                    throw Error(\"Parameter is not a number: \" + number);\r\n\r\n                if (number[0] == '+')\r\n                    number = number.substring(1);\r\n            } else\r\n                number = '0';\r\n\r\n            return number;\r\n        }\r\n\r\n        var value = '0';\r\n        value = validate(number);\r\n\r\n        bigDecimal.prototype.getValue = function () {\r\n            return value;\r\n        }\r\n\r\n        bigDecimal.prototype.getPrettyValue = function (digits, separator) {\r\n            if (!(digits || separator)) {\r\n                digits = 3;\r\n                separator = ',';\r\n            } else if (!(digits && separator)) {\r\n                throw Error('Illegal Arguments. Should pass both digits and separator or pass none');\r\n            }\r\n\r\n            var len = value.indexOf('.');\r\n            len = len > 0 ? len : (value.length);\r\n            var temp = '';\r\n            for (var i = len; i > 0;) {\r\n                if (i < digits) {\r\n                    digits = i;\r\n                    i = 0;\r\n                } else\r\n                    i -= digits;\r\n\r\n                temp = value.substring(i, i + digits) + ((i < (len - digits) && i >= 0) ? separator : '') + temp;\r\n            }\r\n            return temp + value.substring(len);\r\n        }\r\n\r\n        bigDecimal.prototype.round = function (precision) {\r\n            if (!precision)\r\n                precision = 0;\r\n            else if (isNaN(precision))\r\n                throw Error(\"Precision is not a number: \" + precision);\r\n\r\n            return roundOff(value, precision);\r\n        }\r\n\r\n        bigDecimal.add = function (number1, number2) {\r\n            number1 = validate(number1);\r\n            number2 = validate(number2);\r\n            return add(number1, number2);\r\n        }\r\n    }\r\n\r\n    return bigDecimal;\r\n})();\r\n","var roundOff = (function () {\r\n    function roundOff(input, n) {\r\n        if (!n)\r\n            n = 0;\r\n        if (typeof (input) == 'number')\r\n            input += '';\r\n\r\n        var five = '';\r\n        var parts = input.split('.');\r\n        var partInt = parts[0];\r\n\r\n        if (n == 0) {\r\n            var l = partInt.length;\r\n\r\n            if (greaterThanFive(parts[1], partInt)) {\r\n                return increment(partInt);\r\n            }\r\n            return partInt;\r\n        }\r\n\r\n        if (!parts[1]) {\r\n            return partInt + '.' + (new Array(n + 1).join('0'));\r\n        } else if (parts[1].length < n) {\r\n            return parseInt + '.' + (new Array(n - parts[1].length + 1).join('0'));\r\n        }\r\n\r\n        var partDec = parts[1].substring(0, n);\r\n        var rem = parts[1].substring(n);\r\n\r\n        if (greaterThanFive(rem, partDec)) {\r\n            partDec = increment(partDec);\r\n            if (partDec.length > n) {\r\n                return increment(partInt, parseInt(partDec[0])) + '.' + partDec.substring(1);\r\n            }\r\n        }\r\n        return partInt + '.' + partDec;\r\n    }\r\n\r\n    function greaterThanFive(part, pre) {\r\n        if (!part)\r\n            return false;\r\n\r\n        var five = '5' + (new Array(part.length + 1).join('0'));\r\n        return (part > five || (part == '5' && parseInt(pre[pre.length - 1]) % 2 == 1));\r\n    }\r\n\r\n    function increment(part, c) {\r\n        if (!c)\r\n            c = 1;\r\n        if (typeof (part) == 'number')\r\n            part += '';\r\n\r\n        var l = part.length - 1;\r\n        var s = '';\r\n\r\n        for (var i = l; i >= 0; i--) {\r\n            x = parseInt(part[i]) + c;\r\n            if (x == 10) {\r\n                c = 1; x = 0;\r\n            } else {\r\n                c = 0;\r\n            }\r\n            s += x;\r\n        }\r\n        if (c)\r\n            s += c;\r\n\r\n        return s.split('').reverse().join('');\r\n    }\r\n\r\n    return roundOff;\r\n})();\r\n\r\n//module.exports = roundOff;"]}